# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Segment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "start_frame": "int",
        "stop_frame": "int",
        "jobs": "list[SimpleJob]",
    }

    attribute_map = {
        "start_frame": "start_frame",
        "stop_frame": "stop_frame",
        "jobs": "jobs",
    }

    def __init__(
        self, start_frame=None, stop_frame=None, jobs=None
    ):  # noqa: E501
        """Segment - a model defined in Swagger"""  # noqa: E501
        self._start_frame = None
        self._stop_frame = None
        self._jobs = None
        self.discriminator = None
        self.start_frame = start_frame
        self.stop_frame = stop_frame
        self.jobs = jobs

    @property
    def start_frame(self):
        """Gets the start_frame of this Segment.  # noqa: E501


        :return: The start_frame of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._start_frame

    @start_frame.setter
    def start_frame(self, start_frame):
        """Sets the start_frame of this Segment.


        :param start_frame: The start_frame of this Segment.  # noqa: E501
        :type: int
        """
        if start_frame is None:
            raise ValueError(
                "Invalid value for `start_frame`, must not be `None`"
            )  # noqa: E501

        self._start_frame = start_frame

    @property
    def stop_frame(self):
        """Gets the stop_frame of this Segment.  # noqa: E501


        :return: The stop_frame of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._stop_frame

    @stop_frame.setter
    def stop_frame(self, stop_frame):
        """Sets the stop_frame of this Segment.


        :param stop_frame: The stop_frame of this Segment.  # noqa: E501
        :type: int
        """
        if stop_frame is None:
            raise ValueError(
                "Invalid value for `stop_frame`, must not be `None`"
            )  # noqa: E501

        self._stop_frame = stop_frame

    @property
    def jobs(self):
        """Gets the jobs of this Segment.  # noqa: E501


        :return: The jobs of this Segment.  # noqa: E501
        :rtype: list[SimpleJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this Segment.


        :param jobs: The jobs of this Segment.  # noqa: E501
        :type: list[SimpleJob]
        """
        if jobs is None:
            raise ValueError(
                "Invalid value for `jobs`, must not be `None`"
            )  # noqa: E501

        self._jobs = jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Segment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Segment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
