# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "chunk_size": "int",
        "size": "int",
        "image_quality": "int",
        "start_frame": "int",
        "stop_frame": "int",
        "frame_filter": "str",
        "frames": "list[FrameMeta]",
    }

    attribute_map = {
        "chunk_size": "chunk_size",
        "size": "size",
        "image_quality": "image_quality",
        "start_frame": "start_frame",
        "stop_frame": "stop_frame",
        "frame_filter": "frame_filter",
        "frames": "frames",
    }

    def __init__(
        self,
        chunk_size=None,
        size=None,
        image_quality=None,
        start_frame=None,
        stop_frame=None,
        frame_filter=None,
        frames=None,
    ):  # noqa: E501
        """DataMeta - a model defined in Swagger"""  # noqa: E501
        self._chunk_size = None
        self._size = None
        self._image_quality = None
        self._start_frame = None
        self._stop_frame = None
        self._frame_filter = None
        self._frames = None
        self.discriminator = None
        if chunk_size is not None:
            self.chunk_size = chunk_size
        if size is not None:
            self.size = size
        self.image_quality = image_quality
        if start_frame is not None:
            self.start_frame = start_frame
        if stop_frame is not None:
            self.stop_frame = stop_frame
        if frame_filter is not None:
            self.frame_filter = frame_filter
        self.frames = frames

    @property
    def chunk_size(self):
        """Gets the chunk_size of this DataMeta.  # noqa: E501


        :return: The chunk_size of this DataMeta.  # noqa: E501
        :rtype: int
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this DataMeta.


        :param chunk_size: The chunk_size of this DataMeta.  # noqa: E501
        :type: int
        """

        self._chunk_size = chunk_size

    @property
    def size(self):
        """Gets the size of this DataMeta.  # noqa: E501


        :return: The size of this DataMeta.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DataMeta.


        :param size: The size of this DataMeta.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def image_quality(self):
        """Gets the image_quality of this DataMeta.  # noqa: E501


        :return: The image_quality of this DataMeta.  # noqa: E501
        :rtype: int
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this DataMeta.


        :param image_quality: The image_quality of this DataMeta.  # noqa: E501
        :type: int
        """
        if image_quality is None:
            raise ValueError(
                "Invalid value for `image_quality`, must not be `None`"
            )  # noqa: E501

        self._image_quality = image_quality

    @property
    def start_frame(self):
        """Gets the start_frame of this DataMeta.  # noqa: E501


        :return: The start_frame of this DataMeta.  # noqa: E501
        :rtype: int
        """
        return self._start_frame

    @start_frame.setter
    def start_frame(self, start_frame):
        """Sets the start_frame of this DataMeta.


        :param start_frame: The start_frame of this DataMeta.  # noqa: E501
        :type: int
        """

        self._start_frame = start_frame

    @property
    def stop_frame(self):
        """Gets the stop_frame of this DataMeta.  # noqa: E501


        :return: The stop_frame of this DataMeta.  # noqa: E501
        :rtype: int
        """
        return self._stop_frame

    @stop_frame.setter
    def stop_frame(self, stop_frame):
        """Sets the stop_frame of this DataMeta.


        :param stop_frame: The stop_frame of this DataMeta.  # noqa: E501
        :type: int
        """

        self._stop_frame = stop_frame

    @property
    def frame_filter(self):
        """Gets the frame_filter of this DataMeta.  # noqa: E501


        :return: The frame_filter of this DataMeta.  # noqa: E501
        :rtype: str
        """
        return self._frame_filter

    @frame_filter.setter
    def frame_filter(self, frame_filter):
        """Sets the frame_filter of this DataMeta.


        :param frame_filter: The frame_filter of this DataMeta.  # noqa: E501
        :type: str
        """

        self._frame_filter = frame_filter

    @property
    def frames(self):
        """Gets the frames of this DataMeta.  # noqa: E501


        :return: The frames of this DataMeta.  # noqa: E501
        :rtype: list[FrameMeta]
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this DataMeta.


        :param frames: The frames of this DataMeta.  # noqa: E501
        :type: list[FrameMeta]
        """
        if frames is None:
            raise ValueError(
                "Invalid value for `frames`, must not be `None`"
            )  # noqa: E501

        self._frames = frames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DataMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
