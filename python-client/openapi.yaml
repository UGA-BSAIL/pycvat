# This is the OpenAPI spec that was used to generate this API. I am saving it
# because I had to modify it from what CVAT produces by default in order to make
# it usable. Also, I converted it to version 3.0.
openapi: 3.0.1
info:
  title: CVAT REST API
  description: REST API for Computer Vision Annotation Tool (CVAT)
  termsOfService: https://www.google.com/policies/terms/
  contact:
    email: nikita.manovich@intel.com
  license:
    name: MIT License
  version: v1
servers:
- url: http://localhost:8080/api/v1
security:
- Basic: []
paths:
  /auth/login:
    post:
      tags:
      - auth
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      operationId: auth_login_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
      x-codegen-request-body-name: data
  /auth/logout:
    get:
      tags:
      - auth
      summary: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.
      description: Accepts/Returns nothing.
      operationId: auth_logout_list
      responses:
        200:
          description: ""
          content: {}
    post:
      tags:
      - auth
      summary: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.
      description: Accepts/Returns nothing.
      operationId: auth_logout_create
      responses:
        201:
          description: ""
          content: {}
  /auth/password/change:
    post:
      tags:
      - auth
      summary: Calls Django Auth SetPasswordForm save method.
      description: |-
        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      operationId: auth_password_change_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
      x-codegen-request-body-name: data
  /auth/password/reset:
    post:
      tags:
      - auth
      summary: Calls Django Auth PasswordResetForm save method.
      description: |-
        Accepts the following POST parameters: email
        Returns the success/fail message.
      operationId: auth_password_reset_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetSerializerEx'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetSerializerEx'
      x-codegen-request-body-name: data
  /auth/password/reset/confirm:
    post:
      tags:
      - auth
      summary: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.
      description: |-
        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      operationId: auth_password_reset_confirm_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
      x-codegen-request-body-name: data
  /auth/register:
    post:
      tags:
      - auth
      operationId: auth_register_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictedRegister'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedRegister'
      x-codegen-request-body-name: data
  /auth/signing:
    post:
      tags:
      - auth
      summary: This method signs URL for access to the server.
      description: |-
        Signed URL contains a token which authenticates a user on the server.
        Signed URL is valid during 30 seconds since signing.
      operationId: auth_signing_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - url
              type: object
              properties:
                url:
                  type: string
        required: true
      responses:
        200:
          description: text URL
          content: {}
      x-codegen-request-body-name: data
  /comments:
    post:
      tags:
      - comments
      operationId: comments_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      x-codegen-request-body-name: data
  /comments/{id}:
    delete:
      tags:
      - comments
      summary: Method removes a comment from an issue
      operationId: comments_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this comment.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - comments
      summary: Method updates comment in an issue
      operationId: comments_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this comment.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      x-codegen-request-body-name: data
  /issues/{id}:
    delete:
      tags:
      - issues
      summary: Method removes an issue from a job
      operationId: issues_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this issue.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - issues
      summary: Method updates an issue. It is used to resolve/reopen an issue
      operationId: issues_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this issue.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
      x-codegen-request-body-name: data
  /issues/{id}/comments:
    get:
      tags:
      - issues
      summary: The action returns all comments of a specific issue
      operationId: issues_comments
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this issue.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /jobs/{id}:
    get:
      tags:
      - jobs
      summary: Method returns details of a job
      operationId: jobs_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    put:
      tags:
      - jobs
      summary: Method updates a job by id
      operationId: jobs_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      x-codegen-request-body-name: data
    patch:
      tags:
      - jobs
      summary: Methods does a partial update of chosen fields in a job
      operationId: jobs_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      x-codegen-request-body-name: data
  /jobs/{id}/annotations:
    get:
      tags:
      - jobs
      summary: Method returns annotations for a specific job
      operationId: jobs_annotations_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabeledData'
    put:
      tags:
      - jobs
      summary: Method performs an update of all annotations in a specific job
      operationId: jobs_annotations_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabeledData'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabeledData'
      x-codegen-request-body-name: data
    delete:
      tags:
      - jobs
      summary: Method deletes all annotations for a specific job
      operationId: jobs_annotations_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - jobs
      summary: Method performs a partial update of annotations in a specific job
      operationId: jobs_annotations_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      - name: action
        in: query
        required: true
        schema:
          type: string
          enum:
          - create
          - update
          - delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabeledData'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabeledData'
      x-codegen-request-body-name: data
  /jobs/{id}/issues:
    get:
      tags:
      - jobs
      summary: Method returns list of issues for the job
      operationId: jobs_issues
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CombinedIssue'
  /jobs/{id}/reviews:
    get:
      tags:
      - jobs
      summary: Method returns list of reviews for the job
      operationId: jobs_reviews
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this job.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /lambda/functions:
    get:
      tags:
      - lambda
      operationId: lambda_functions_list
      responses:
        200:
          description: ""
          content: {}
  /lambda/functions/{func_id}:
    get:
      tags:
      - lambda
      operationId: lambda_functions_read
      parameters:
      - name: func_id
        in: path
        required: true
        schema:
          pattern: '[a-zA-Z0-9_.-]+'
          type: string
      responses:
        200:
          description: ""
          content: {}
    post:
      tags:
      - lambda
      operationId: lambda_functions_create
      parameters:
      - name: func_id
        in: path
        required: true
        schema:
          pattern: '[a-zA-Z0-9_.-]+'
          type: string
      responses:
        201:
          description: ""
          content: {}
  /lambda/requests:
    get:
      tags:
      - lambda
      operationId: lambda_requests_list
      responses:
        200:
          description: ""
          content: {}
    post:
      tags:
      - lambda
      operationId: lambda_requests_create
      responses:
        201:
          description: ""
          content: {}
  /lambda/requests/{id}:
    get:
      tags:
      - lambda
      operationId: lambda_requests_read
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
  /projects:
    get:
      tags:
      - projects
      summary: Returns a paginated list of projects according to query parameters
        (12 projects per page)
      operationId: projects_list
      parameters:
      - name: search
        in: query
        description: A search term.
        schema:
          type: string
      - name: id
        in: query
        description: A unique number value identifying this project
        schema:
          type: number
      - name: name
        in: query
        description: Find all projects where name contains a parameter value
        schema:
          type: string
      - name: owner
        in: query
        description: Find all project where owner name contains a parameter value
        schema:
          type: string
      - name: status
        in: query
        description: Find all projects with a specific status
        schema:
          type: string
          enum:
          - annotation
          - validation
          - completed
      - name: ordering
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                required:
                - count
                - results
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                    nullable: true
                  previous:
                    type: string
                    format: uri
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
    post:
      tags:
      - projects
      summary: Method creates a new project
      operationId: projects_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      x-codegen-request-body-name: data
  /projects/{id}:
    get:
      tags:
      - projects
      summary: Method returns details of a specific project
      operationId: projects_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this project.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    delete:
      tags:
      - projects
      summary: Method deletes a specific project
      operationId: projects_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this project.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - projects
      summary: Methods does a partial update of chosen fields in a project
      operationId: projects_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this project.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      x-codegen-request-body-name: data
  /projects/{id}/tasks:
    get:
      tags:
      - projects
      summary: Returns information of the tasks of the project with the selected id
      operationId: projects_tasks
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this project.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /restrictions/terms-of-use:
    get:
      tags:
      - restrictions
      operationId: restrictions_terms_of_use
      responses:
        200:
          description: ""
          content: {}
  /restrictions/user-agreements:
    get:
      tags:
      - restrictions
      summary: Method provides user agreements that the user must accept to register
      operationId: restrictions_user_agreements
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAgreement'
  /reviews:
    post:
      tags:
      - reviews
      summary: Submit a review for a job
      operationId: reviews_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombinedReview'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinedReview'
      x-codegen-request-body-name: data
  /reviews/{id}:
    delete:
      tags:
      - reviews
      summary: Method removes a review from a job
      operationId: reviews_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this review.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
  /server/about:
    get:
      tags:
      - server
      summary: Method provides basic CVAT information
      operationId: server_about
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/About'
  /server/annotation/formats:
    get:
      tags:
      - server
      summary: Method provides the list of supported annotations formats
      operationId: server_annotation_annotation_formats
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetFormats'
  /server/exception:
    post:
      tags:
      - server
      summary: Saves an exception from a client on the server
      description: Sends logs to the ELK if it is connected
      operationId: server_exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exception'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      x-codegen-request-body-name: data
  /server/logs:
    post:
      tags:
      - server
      summary: Saves logs from a client on the server
      description: Sends logs to the ELK if it is connected
      operationId: server_logs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LogEvent'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEvent'
      x-codegen-request-body-name: data
  /server/plugins:
    get:
      tags:
      - server
      summary: Method provides allowed plugins.
      operationId: server_plugins
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugins'
  /server/share:
    get:
      tags:
      - server
      summary: Returns all files and folders that are on the server along specified
        path
      operationId: server_share
      parameters:
      - name: directory
        in: query
        description: Directory to browse
        schema:
          type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileInfo'
  /tasks:
    get:
      tags:
      - tasks
      summary: Returns a paginated list of tasks according to query parameters (10
        tasks per page)
      operationId: tasks_list
      parameters:
      - name: search
        in: query
        description: A search term.
        schema:
          type: string
      - name: id
        in: query
        description: A unique number value identifying this task
        schema:
          type: number
      - name: name
        in: query
        description: Find all tasks where name contains a parameter value
        schema:
          type: string
      - name: owner
        in: query
        description: Find all tasks where owner name contains a parameter value
        schema:
          type: string
      - name: mode
        in: query
        description: Find all tasks with a specific mode
        schema:
          type: string
          enum:
          - annotation
          - interpolation
      - name: status
        in: query
        description: Find all tasks with a specific status
        schema:
          type: string
          enum:
          - annotation
          - validation
          - completed
      - name: assignee
        in: query
        description: Find all tasks where assignee name contains a parameter value
        schema:
          type: string
      - name: ordering
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                required:
                - count
                - results
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                    nullable: true
                  previous:
                    type: string
                    format: uri
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
    post:
      tags:
      - tasks
      summary: Method creates a new task in a database without any attached images
        and videos
      operationId: tasks_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      x-codegen-request-body-name: data
  /tasks/{id}:
    get:
      tags:
      - tasks
      summary: Method returns details of a specific task
      operationId: tasks_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    put:
      tags:
      - tasks
      summary: Method updates a task by id
      operationId: tasks_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      x-codegen-request-body-name: data
    delete:
      tags:
      - tasks
      summary: Method deletes a specific task, all attached jobs, annotations, and
        data
      operationId: tasks_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - tasks
      summary: Methods does a partial update of chosen fields in a task
      operationId: tasks_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      x-codegen-request-body-name: data
  /tasks/{id}/annotations:
    get:
      tags:
      - tasks
      summary: Method allows to download task annotations
      operationId: tasks_annotations_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      - name: format
        in: query
        description: |-
          Desired output format name
          You can get the list of supported formats at:
          /server/annotation/formats
        schema:
          type: string
      - name: filename
        in: query
        description: Desired output file name
        schema:
          type: string
      - name: action
        in: query
        description: Used to start downloading process after annotation file had been
          created
        schema:
          type: string
          enum:
          - download
      responses:
        200:
          description: Download of file started
          content: {}
        201:
          description: Annotations file is ready to download
          content: {}
        202:
          description: Dump of annotations has been started
          content: {}
        405:
          description: Format is not available
          content: {}
    put:
      tags:
      - tasks
      summary: Method allows to upload task annotations
      operationId: tasks_annotations_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      - name: format
        in: query
        description: |-
          Input format name
          You can get the list of supported formats at:
          /server/annotation/formats
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabeledData'
        required: true
      responses:
        201:
          description: Uploading has finished
          content: {}
        202:
          description: Uploading has been started
          content: {}
        405:
          description: Format is not available
          content: {}
      x-codegen-request-body-name: data
    delete:
      tags:
      - tasks
      summary: Method deletes all annotations for a specific task
      operationId: tasks_annotations_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - tasks
      summary: Method performs a partial update of annotations in a specific task
      operationId: tasks_annotations_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      - name: action
        in: query
        required: true
        schema:
          type: string
          enum:
          - create
          - update
          - delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabeledData'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabeledData'
      x-codegen-request-body-name: data
  /tasks/{id}/data:
    get:
      tags:
      - tasks
      summary: Method returns data for a specific task
      operationId: tasks_data_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      - name: type
        in: query
        description: Specifies the type of the requested data
        required: true
        schema:
          type: string
          enum:
          - chunk
          - frame
          - preview
      - name: quality
        in: query
        description: Specifies the quality level of the requested data, doesn't matter
          for 'preview' type
        required: true
        schema:
          type: string
          enum:
          - compressed
          - original
      - name: number
        in: query
        description: A unique number value identifying chunk or frame, doesn't matter
          for 'preview' type
        required: true
        schema:
          type: number
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    post:
      tags:
      - tasks
      summary: Method permanently attaches images or video to a task
      operationId: tasks_data_create
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
        required: true
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
      x-codegen-request-body-name: data
  /tasks/{id}/data/meta:
    get:
      tags:
      - tasks
      summary: Method provides a meta information about media files which are related
        with the task
      operationId: tasks_data_data_info
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMeta'
  /tasks/{id}/dataset:
    get:
      tags:
      - tasks
      summary: Export task as a dataset in a specific format
      operationId: tasks_dataset_export
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      - name: format
        in: query
        description: |-
          Desired output format name
          You can get the list of supported formats at:
          /server/annotation/formats
        required: true
        schema:
          type: string
      - name: filename
        in: query
        description: Desired output file name
        schema:
          type: string
      - name: action
        in: query
        description: Used to start downloading process after annotation file had been
          created
        schema:
          type: string
          enum:
          - download
      responses:
        200:
          description: Download of file started
          content: {}
        201:
          description: Output file is ready for downloading
          content: {}
        202:
          description: Exporting has been started
          content: {}
        405:
          description: Format is not available
          content: {}
  /tasks/{id}/jobs:
    get:
      tags:
      - tasks
      summary: Returns a list of jobs for a specific task
      operationId: tasks_jobs
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
  /tasks/{id}/status:
    get:
      tags:
      - tasks
      summary: When task is being created the method returns information about a status
        of the creation process
      operationId: tasks_status
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RqStatus'
  /users:
    get:
      tags:
      - users
      summary: Method provides a paginated list of users registered on the server
      operationId: users_list
      parameters:
      - name: search
        in: query
        description: A search term.
        schema:
          type: string
      - name: id
        in: query
        description: A unique number value identifying this user
        schema:
          type: number
      - name: ordering
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                required:
                - count
                - results
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                    nullable: true
                  previous:
                    type: string
                    format: uri
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /users/self:
    get:
      tags:
      - users
      summary: Method returns an instance of a user who is currently authorized
      description: Method returns an instance of a user who is currently authorized
      operationId: users_self
      parameters:
      - name: search
        in: query
        description: A search term.
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: number
      - name: ordering
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                required:
                - count
                - results
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                    nullable: true
                  previous:
                    type: string
                    format: uri
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      tags:
      - users
      summary: Method provides information of a specific user
      operationId: users_read
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this user.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - users
      summary: Method deletes a specific user from the server
      operationId: users_delete
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this user.
        required: true
        schema:
          type: integer
      responses:
        204:
          description: ""
          content: {}
    patch:
      tags:
      - users
      summary: Method updates chosen fields of a user
      operationId: users_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this user.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: data
components:
  schemas:
    Login:
      required:
      - password
      type: object
      properties:
        username:
          title: Username
          type: string
        email:
          title: Email
          type: string
          format: email
        password:
          title: Password
          minLength: 1
          type: string
    PasswordChange:
      required:
      - new_password1
      - new_password2
      - old_password
      type: object
      properties:
        old_password:
          title: Old password
          maxLength: 128
          minLength: 1
          type: string
        new_password1:
          title: New password1
          maxLength: 128
          minLength: 1
          type: string
        new_password2:
          title: New password2
          maxLength: 128
          minLength: 1
          type: string
    PasswordResetSerializerEx:
      required:
      - email
      type: object
      properties:
        email:
          title: Email
          minLength: 1
          type: string
          format: email
    PasswordResetConfirm:
      required:
      - new_password1
      - new_password2
      - token
      - uid
      type: object
      properties:
        new_password1:
          title: New password1
          maxLength: 128
          minLength: 1
          type: string
        new_password2:
          title: New password2
          maxLength: 128
          minLength: 1
          type: string
        uid:
          title: Uid
          minLength: 1
          type: string
        token:
          title: Token
          minLength: 1
          type: string
    UserAgreement:
      required:
      - name
      type: object
      properties:
        name:
          title: Name
          maxLength: 256
          minLength: 1
          type: string
        display_text:
          title: Display text
          maxLength: 2048
          minLength: 1
          type: string
          default: ""
        url:
          title: Url
          maxLength: 2048
          minLength: 1
          type: string
          default: ""
        required:
          title: Required
          type: boolean
          default: false
        value:
          title: Value
          type: boolean
          default: false
    RestrictedRegister:
      required:
      - password1
      - password2
      - username
      type: object
      properties:
        username:
          title: Username
          maxLength: 150
          minLength: 1
          type: string
        email:
          title: Email
          minLength: 1
          type: string
          format: email
        password1:
          title: Password1
          minLength: 1
          type: string
        password2:
          title: Password2
          minLength: 1
          type: string
        first_name:
          title: First name
          minLength: 1
          type: string
        last_name:
          title: Last name
          minLength: 1
          type: string
        confirmations:
          type: array
          items:
            $ref: '#/components/schemas/UserAgreement'
    BasicUser:
      title: Author
      required:
      - username
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        username:
          title: Username
          maxLength: 150
          minLength: 1
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          title: First name
          maxLength: 150
          type: string
        last_name:
          title: Last name
          maxLength: 150
          type: string
    Comment:
      required:
      - issue
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        author:
          $ref: '#/components/schemas/BasicUser'
        author_id:
          title: Author id
          type: integer
          nullable: true
        message:
          title: Message
          minLength: 1
          type: string
        created_date:
          title: Created date
          type: string
          format: date-time
          readOnly: true
        updated_date:
          title: Updated date
          type: string
          format: date-time
          readOnly: true
        issue:
          title: Issue
          type: integer
    Issue:
      required:
      - frame
      - job
      - position
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/BasicUser'
        owner_id:
          title: Owner id
          type: integer
          nullable: true
        resolver:
          $ref: '#/components/schemas/BasicUser'
        resolver_id:
          title: Resolver id
          type: integer
          nullable: true
        position:
          type: array
          items:
            type: number
        frame:
          title: Frame
          maximum: 2147483647
          minimum: 0
          type: integer
        created_date:
          title: Created date
          type: string
          format: date-time
          readOnly: true
        resolved_date:
          title: Resolved date
          type: string
          format: date-time
          nullable: true
        job:
          title: Job
          type: integer
        review:
          title: Review
          type: integer
          nullable: true
    Job:
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        assignee:
          $ref: '#/components/schemas/BasicUser'
        assignee_id:
          title: Assignee id
          type: integer
          nullable: true
        reviewer:
          $ref: '#/components/schemas/BasicUser'
        reviewer_id:
          title: Reviewer id
          type: integer
          nullable: true
        status:
          title: Status
          type: string
          enum:
          - annotation
          - validation
          - completed
        start_frame:
          title: Start frame
          type: string
          readOnly: true
        stop_frame:
          title: Stop frame
          type: string
          readOnly: true
        task_id:
          title: Task id
          type: string
          readOnly: true
    AttributeVal:
      required:
      - spec_id
      - value
      type: object
      properties:
        spec_id:
          title: Spec id
          type: integer
        value:
          title: Value
          maxLength: 4096
          type: string
    LabeledImage:
      required:
      - attributes
      - frame
      - group
      - label_id
      type: object
      properties:
        id:
          title: Id
          type: integer
          nullable: true
        frame:
          title: Frame
          minimum: 0
          type: integer
        label_id:
          title: Label id
          minimum: 0
          type: integer
        group:
          title: Group
          minimum: 0
          type: integer
        source:
          title: Source
          minLength: 1
          type: string
          default: manual
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVal'
    LabeledShape:
      required:
      - attributes
      - frame
      - group
      - label_id
      - occluded
      - points
      - type
      type: object
      properties:
        type:
          title: Type
          type: string
          enum:
          - rectangle
          - polygon
          - polyline
          - points
          - cuboid
        occluded:
          title: Occluded
          type: boolean
        z_order:
          title: Z order
          type: integer
        points:
          type: array
          items:
            type: number
        id:
          title: Id
          type: integer
          nullable: true
        frame:
          title: Frame
          minimum: 0
          type: integer
        label_id:
          title: Label id
          minimum: 0
          type: integer
        group:
          title: Group
          minimum: 0
          type: integer
        source:
          title: Source
          minLength: 1
          type: string
          default: manual
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVal'
    TrackedShape:
      required:
      - attributes
      - frame
      - occluded
      - outside
      - points
      - type
      type: object
      properties:
        type:
          title: Type
          type: string
          enum:
          - rectangle
          - polygon
          - polyline
          - points
          - cuboid
        occluded:
          title: Occluded
          type: boolean
        z_order:
          title: Z order
          type: integer
        points:
          type: array
          items:
            type: number
        id:
          title: Id
          type: integer
          nullable: true
        frame:
          title: Frame
          minimum: 0
          type: integer
        outside:
          title: Outside
          type: boolean
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVal'
    LabeledTrack:
      required:
      - attributes
      - frame
      - group
      - label_id
      - shapes
      type: object
      properties:
        id:
          title: Id
          type: integer
          nullable: true
        frame:
          title: Frame
          minimum: 0
          type: integer
        label_id:
          title: Label id
          minimum: 0
          type: integer
        group:
          title: Group
          minimum: 0
          type: integer
        source:
          title: Source
          minLength: 1
          type: string
          default: manual
        shapes:
          type: array
          items:
            $ref: '#/components/schemas/TrackedShape'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeVal'
    LabeledData:
      required:
      - shapes
      - tags
      - tracks
      - version
      type: object
      properties:
        version:
          title: Version
          type: integer
        tags:
          type: array
          items:
            $ref: '#/components/schemas/LabeledImage'
        shapes:
          type: array
          items:
            $ref: '#/components/schemas/LabeledShape'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/LabeledTrack'
    CombinedIssue:
      required:
      - comment_set
      - frame
      - job
      - position
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/BasicUser'
        owner_id:
          title: Owner id
          type: integer
          nullable: true
        resolver:
          $ref: '#/components/schemas/BasicUser'
        resolver_id:
          title: Resolver id
          type: integer
          nullable: true
        position:
          type: array
          items:
            type: number
        comment_set:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        frame:
          title: Frame
          maximum: 2147483647
          minimum: 0
          type: integer
        created_date:
          title: Created date
          type: string
          format: date-time
          readOnly: true
        resolved_date:
          title: Resolved date
          type: string
          format: date-time
          nullable: true
        job:
          title: Job
          type: integer
        review:
          title: Review
          type: integer
          nullable: true
    Review:
      required:
      - estimated_quality
      - job
      - status
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        assignee:
          $ref: '#/components/schemas/BasicUser'
        assignee_id:
          title: Assignee id
          type: integer
          nullable: true
        reviewer:
          $ref: '#/components/schemas/BasicUser'
        reviewer_id:
          title: Reviewer id
          type: integer
          nullable: true
        estimated_quality:
          title: Estimated quality
          type: number
        status:
          title: Status
          type: string
          enum:
          - accepted
          - rejected
          - review_further
        job:
          title: Job
          type: integer
    Attribute:
      required:
      - default_value
      - input_type
      - mutable
      - name
      - values
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          maxLength: 64
          minLength: 1
          type: string
        mutable:
          title: Mutable
          type: boolean
        input_type:
          title: Input type
          type: string
          enum:
          - checkbox
          - radio
          - number
          - text
          - select
        default_value:
          title: Default value
          maxLength: 128
          minLength: 1
          type: string
        values:
          title: Values
          maxLength: 4096
          minLength: 1
          type: string
    Label:
      required:
      - name
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          maxLength: 64
          minLength: 1
          type: string
        color:
          title: Color
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
    SimpleJob:
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        assignee:
          $ref: '#/components/schemas/BasicUser'
        assignee_id:
          title: Assignee id
          type: integer
        reviewer:
          $ref: '#/components/schemas/BasicUser'
        reviewer_id:
          title: Reviewer id
          type: integer
          nullable: true
        status:
          title: Status
          type: string
          enum:
          - annotation
          - validation
          - completed
    Segment:
      required:
      - jobs
      - start_frame
      - stop_frame
      type: object
      properties:
        start_frame:
          title: Start frame
          maximum: 2147483647
          minimum: -2147483648
          type: integer
        stop_frame:
          title: Stop frame
          maximum: 2147483647
          minimum: -2147483648
          type: integer
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/SimpleJob'
    Task:
      required:
      - name
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          maxLength: 256
          minLength: 1
          type: string
        project_id:
          title: Project id
          type: integer
        mode:
          title: Mode
          minLength: 1
          type: string
          readOnly: true
        owner:
          $ref: '#/components/schemas/BasicUser'
        assignee:
          $ref: '#/components/schemas/BasicUser'
        owner_id:
          title: Owner id
          type: integer
          nullable: true
        assignee_id:
          title: Assignee id
          type: integer
          nullable: true
        bug_tracker:
          title: Bug tracker
          maxLength: 2000
          type: string
        created_date:
          title: Created date
          type: string
          format: date-time
          readOnly: true
        updated_date:
          title: Updated date
          type: string
          format: date-time
          readOnly: true
        overlap:
          title: Overlap
          maximum: 2147483647
          minimum: 0
          type: integer
          nullable: true
        segment_size:
          title: Segment size
          maximum: 2147483647
          minimum: 0
          type: integer
        status:
          title: Status
          type: string
          readOnly: true
          enum:
          - annotation
          - validation
          - completed
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        segments:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Segment'
        data_chunk_size:
          title: Data chunk size
          type: string
          readOnly: true
        data_compressed_chunk_type:
          title: Data compressed chunk type
          type: string
          readOnly: true
        data_original_chunk_type:
          title: Data original chunk type
          type: string
          readOnly: true
        size:
          title: Size
          type: string
          readOnly: true
        image_quality:
          title: Image quality
          type: string
          readOnly: true
        data:
          title: Data
          type: string
          readOnly: true
    Project:
      required:
      - name
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          maxLength: 256
          minLength: 1
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        tasks:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Task'
        owner:
          $ref: '#/components/schemas/BasicUser'
        assignee:
          $ref: '#/components/schemas/BasicUser'
        owner_id:
          title: Owner id
          type: integer
          nullable: true
        assignee_id:
          title: Assignee id
          type: integer
          nullable: true
        bug_tracker:
          title: Bug tracker
          maxLength: 2000
          type: string
        created_date:
          title: Created date
          type: string
          format: date-time
          readOnly: true
        updated_date:
          title: Updated date
          type: string
          format: date-time
          readOnly: true
        status:
          title: Status
          type: string
          readOnly: true
          enum:
          - annotation
          - validation
          - completed
    CombinedReview:
      required:
      - estimated_quality
      - issue_set
      - job
      - status
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        assignee:
          $ref: '#/components/schemas/BasicUser'
        assignee_id:
          title: Assignee id
          type: integer
          nullable: true
        reviewer:
          $ref: '#/components/schemas/BasicUser'
        reviewer_id:
          title: Reviewer id
          type: integer
          nullable: true
        issue_set:
          type: array
          items:
            $ref: '#/components/schemas/CombinedIssue'
        estimated_quality:
          title: Estimated quality
          type: number
        status:
          title: Status
          type: string
          enum:
          - accepted
          - rejected
          - review_further
        job:
          title: Job
          type: integer
    About:
      required:
      - description
      - name
      - version
      type: object
      properties:
        name:
          title: Name
          maxLength: 128
          minLength: 1
          type: string
        description:
          title: Description
          maxLength: 2048
          minLength: 1
          type: string
        version:
          title: Version
          maxLength: 64
          minLength: 1
          type: string
    DatasetFormat:
      required:
      - enabled
      - ext
      - name
      - version
      type: object
      properties:
        name:
          title: Name
          maxLength: 64
          minLength: 1
          type: string
        ext:
          title: Ext
          maxLength: 64
          minLength: 1
          type: string
        version:
          title: Version
          maxLength: 64
          minLength: 1
          type: string
        enabled:
          title: Enabled
          type: boolean
    DatasetFormats:
      required:
      - exporters
      - importers
      type: object
      properties:
        importers:
          type: array
          items:
            $ref: '#/components/schemas/DatasetFormat'
        exporters:
          type: array
          items:
            $ref: '#/components/schemas/DatasetFormat'
    Exception:
      required:
      - client
      - client_id
      - column
      - filename
      - line
      - message
      - stack
      - system
      - time
      type: object
      properties:
        system:
          title: System
          maxLength: 255
          minLength: 1
          type: string
        client:
          title: Client
          maxLength: 255
          minLength: 1
          type: string
        time:
          title: Time
          type: string
          format: date-time
        job_id:
          title: Job id
          type: integer
        task_id:
          title: Task id
          type: integer
        proj_id:
          title: Proj id
          type: integer
        client_id:
          title: Client id
          type: integer
        message:
          title: Message
          maxLength: 4096
          minLength: 1
          type: string
        filename:
          title: Filename
          minLength: 1
          type: string
          format: uri
        line:
          title: Line
          type: integer
        column:
          title: Column
          type: integer
        stack:
          title: Stack
          maxLength: 8192
          type: string
    LogEvent:
      required:
      - client_id
      - is_active
      - name
      - time
      type: object
      properties:
        job_id:
          title: Job id
          type: integer
        task_id:
          title: Task id
          type: integer
        proj_id:
          title: Proj id
          type: integer
        client_id:
          title: Client id
          type: integer
        name:
          title: Name
          maxLength: 64
          minLength: 1
          type: string
        time:
          title: Time
          type: string
          format: date-time
        message:
          title: Message
          maxLength: 4096
          minLength: 1
          type: string
        payload:
          title: Payload
          type: object
          additionalProperties:
            type: string
        is_active:
          title: Is active
          type: boolean
    Plugins:
      required:
      - ANALYTICS
      - GIT_INTEGRATION
      - MODELS
      type: object
      properties:
        GIT_INTEGRATION:
          title: Git integration
          type: boolean
        ANALYTICS:
          title: Analytics
          type: boolean
        MODELS:
          title: Models
          type: boolean
    FileInfo:
      required:
      - name
      - type
      type: object
      properties:
        name:
          title: Name
          maxLength: 1024
          minLength: 1
          type: string
        type:
          title: Type
          type: string
          enum:
          - REG
          - DIR
    ClientFile:
      type: object
      properties:
        file:
          title: File
          type: string
          format: uri
          readOnly: true
    ServerFile:
      required:
      - file
      type: object
      properties:
        file:
          title: File
          maxLength: 1024
          minLength: 1
          type: string
    RemoteFile:
      required:
      - file
      type: object
      properties:
        file:
          title: File
          maxLength: 1024
          minLength: 1
          type: string
    Data:
      required:
      - image_quality
      type: object
      properties:
        chunk_size:
          title: Chunk size
          maximum: 2147483647
          minimum: 0
          type: integer
          nullable: true
        size:
          title: Size
          maximum: 2147483647
          minimum: 0
          type: integer
        image_quality:
          title: Image quality
          maximum: 1E+2
          minimum: 0
          type: integer
        start_frame:
          title: Start frame
          maximum: 2147483647
          minimum: 0
          type: integer
        stop_frame:
          title: Stop frame
          maximum: 2147483647
          minimum: 0
          type: integer
        frame_filter:
          title: Frame filter
          maxLength: 256
          type: string
        compressed_chunk_type:
          title: Compressed chunk type
          type: string
          enum:
          - video
          - imageset
          - list
        original_chunk_type:
          title: Original chunk type
          type: string
          enum:
          - video
          - imageset
          - list
        client_files:
          type: array
          items:
            $ref: '#/components/schemas/ClientFile'
        server_files:
          type: array
          items:
            $ref: '#/components/schemas/ServerFile'
        remote_files:
          type: array
          items:
            $ref: '#/components/schemas/RemoteFile'
        use_zip_chunks:
          title: Use zip chunks
          type: boolean
          default: false
        use_cache:
          title: Use cache
          type: boolean
          default: false
        copy_data:
          title: Copy data
          type: boolean
          default: false
    FrameMeta:
      required:
      - height
      - name
      - width
      type: object
      properties:
        width:
          title: Width
          type: integer
        height:
          title: Height
          type: integer
        name:
          title: Name
          maxLength: 1024
          minLength: 1
          type: string
    DataMeta:
      required:
      - frames
      - image_quality
      type: object
      properties:
        chunk_size:
          title: Chunk size
          type: integer
          readOnly: true
        size:
          title: Size
          type: integer
          readOnly: true
        image_quality:
          title: Image quality
          maximum: 1E+2
          minimum: 0
          type: integer
        start_frame:
          title: Start frame
          type: integer
          readOnly: true
        stop_frame:
          title: Stop frame
          type: integer
          readOnly: true
        frame_filter:
          title: Frame filter
          minLength: 1
          type: string
          readOnly: true
        frames:
          type: array
          items:
            $ref: '#/components/schemas/FrameMeta'
    RqStatus:
      required:
      - state
      type: object
      properties:
        state:
          title: State
          type: string
          enum:
          - Queued
          - Started
          - Finished
          - Failed
        message:
          title: Message
          type: string
          default: ""
    User:
      required:
      - groups
      - username
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        username:
          title: Username
          maxLength: 150
          minLength: 1
          pattern: ^[\w.@+-]+$
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          title: First name
          maxLength: 150
          type: string
        last_name:
          title: Last name
          maxLength: 150
          type: string
        email:
          title: Email address
          maxLength: 254
          type: string
          format: email
        groups:
          uniqueItems: true
          type: array
          items:
            type: string
        is_staff:
          title: Staff status
          type: boolean
          description: Designates whether the user can log into this admin site.
        is_superuser:
          title: Superuser status
          type: boolean
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_active:
          title: Active
          type: boolean
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        last_login:
          title: Last login
          type: string
          format: date-time
          readOnly: true
        date_joined:
          title: Date joined
          type: string
          format: date-time
          readOnly: true
  securitySchemes:
    Basic:
      type: http
      scheme: basic
