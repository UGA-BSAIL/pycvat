# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from swagger_client.configuration import Configuration


class PasswordResetConfirm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "new_password1": "str",
        "new_password2": "str",
        "uid": "str",
        "token": "str",
    }

    attribute_map = {
        "new_password1": "new_password1",
        "new_password2": "new_password2",
        "uid": "uid",
        "token": "token",
    }

    def __init__(
        self,
        new_password1=None,
        new_password2=None,
        uid=None,
        token=None,
        _configuration=None,
    ):  # noqa: E501
        """PasswordResetConfirm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._new_password1 = None
        self._new_password2 = None
        self._uid = None
        self._token = None
        self.discriminator = None

        self.new_password1 = new_password1
        self.new_password2 = new_password2
        self.uid = uid
        self.token = token

    @property
    def new_password1(self):
        """Gets the new_password1 of this PasswordResetConfirm.  # noqa: E501


        :return: The new_password1 of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._new_password1

    @new_password1.setter
    def new_password1(self, new_password1):
        """Sets the new_password1 of this PasswordResetConfirm.


        :param new_password1: The new_password1 of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if (
            self._configuration.client_side_validation
            and new_password1 is None
        ):
            raise ValueError(
                "Invalid value for `new_password1`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and new_password1 is not None
            and len(new_password1) > 128
        ):
            raise ValueError(
                "Invalid value for `new_password1`, length must be less than or equal to `128`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and new_password1 is not None
            and len(new_password1) < 1
        ):
            raise ValueError(
                "Invalid value for `new_password1`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._new_password1 = new_password1

    @property
    def new_password2(self):
        """Gets the new_password2 of this PasswordResetConfirm.  # noqa: E501


        :return: The new_password2 of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._new_password2

    @new_password2.setter
    def new_password2(self, new_password2):
        """Sets the new_password2 of this PasswordResetConfirm.


        :param new_password2: The new_password2 of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if (
            self._configuration.client_side_validation
            and new_password2 is None
        ):
            raise ValueError(
                "Invalid value for `new_password2`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and new_password2 is not None
            and len(new_password2) > 128
        ):
            raise ValueError(
                "Invalid value for `new_password2`, length must be less than or equal to `128`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and new_password2 is not None
            and len(new_password2) < 1
        ):
            raise ValueError(
                "Invalid value for `new_password2`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._new_password2 = new_password2

    @property
    def uid(self):
        """Gets the uid of this PasswordResetConfirm.  # noqa: E501


        :return: The uid of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PasswordResetConfirm.


        :param uid: The uid of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uid is None:
            raise ValueError(
                "Invalid value for `uid`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and uid is not None
            and len(uid) < 1
        ):
            raise ValueError(
                "Invalid value for `uid`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._uid = uid

    @property
    def token(self):
        """Gets the token of this PasswordResetConfirm.  # noqa: E501


        :return: The token of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PasswordResetConfirm.


        :param token: The token of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token is None:
            raise ValueError(
                "Invalid value for `token`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and token is not None
            and len(token) < 1
        ):
            raise ValueError(
                "Invalid value for `token`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PasswordResetConfirm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordResetConfirm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PasswordResetConfirm):
            return True

        return self.to_dict() != other.to_dict()
