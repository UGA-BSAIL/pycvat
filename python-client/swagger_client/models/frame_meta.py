# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FrameMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "width": "int",
        "height": "int",
        "name": "str",
        "has_related_context": "bool",
    }

    attribute_map = {
        "width": "width",
        "height": "height",
        "name": "name",
        "has_related_context": "has_related_context",
    }

    def __init__(
        self, width=None, height=None, name=None, has_related_context=None
    ):  # noqa: E501
        """FrameMeta - a model defined in Swagger"""  # noqa: E501
        self._width = None
        self._height = None
        self._name = None
        self._has_related_context = None
        self.discriminator = None
        self.width = width
        self.height = height
        self.name = name
        self.has_related_context = has_related_context

    @property
    def width(self):
        """Gets the width of this FrameMeta.  # noqa: E501


        :return: The width of this FrameMeta.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FrameMeta.


        :param width: The width of this FrameMeta.  # noqa: E501
        :type: int
        """
        if width is None:
            raise ValueError(
                "Invalid value for `width`, must not be `None`"
            )  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this FrameMeta.  # noqa: E501


        :return: The height of this FrameMeta.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this FrameMeta.


        :param height: The height of this FrameMeta.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError(
                "Invalid value for `height`, must not be `None`"
            )  # noqa: E501

        self._height = height

    @property
    def name(self):
        """Gets the name of this FrameMeta.  # noqa: E501


        :return: The name of this FrameMeta.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FrameMeta.


        :param name: The name of this FrameMeta.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def has_related_context(self):
        """Gets the has_related_context of this FrameMeta.  # noqa: E501


        :return: The has_related_context of this FrameMeta.  # noqa: E501
        :rtype: bool
        """
        return self._has_related_context

    @has_related_context.setter
    def has_related_context(self, has_related_context):
        """Sets the has_related_context of this FrameMeta.


        :param has_related_context: The has_related_context of this FrameMeta.  # noqa: E501
        :type: bool
        """
        if has_related_context is None:
            raise ValueError(
                "Invalid value for `has_related_context`, must not be `None`"
            )  # noqa: E501

        self._has_related_context = has_related_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FrameMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrameMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
