# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatasetFormats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'importers': 'list[DatasetFormat]',
        'exporters': 'list[DatasetFormat]'
    }

    attribute_map = {
        'importers': 'importers',
        'exporters': 'exporters'
    }

    def __init__(self, importers=None, exporters=None):  # noqa: E501
        """DatasetFormats - a model defined in Swagger"""  # noqa: E501
        self._importers = None
        self._exporters = None
        self.discriminator = None
        self.importers = importers
        self.exporters = exporters

    @property
    def importers(self):
        """Gets the importers of this DatasetFormats.  # noqa: E501


        :return: The importers of this DatasetFormats.  # noqa: E501
        :rtype: list[DatasetFormat]
        """
        return self._importers

    @importers.setter
    def importers(self, importers):
        """Sets the importers of this DatasetFormats.


        :param importers: The importers of this DatasetFormats.  # noqa: E501
        :type: list[DatasetFormat]
        """
        if importers is None:
            raise ValueError("Invalid value for `importers`, must not be `None`")  # noqa: E501

        self._importers = importers

    @property
    def exporters(self):
        """Gets the exporters of this DatasetFormats.  # noqa: E501


        :return: The exporters of this DatasetFormats.  # noqa: E501
        :rtype: list[DatasetFormat]
        """
        return self._exporters

    @exporters.setter
    def exporters(self, exporters):
        """Sets the exporters of this DatasetFormats.


        :param exporters: The exporters of this DatasetFormats.  # noqa: E501
        :type: list[DatasetFormat]
        """
        if exporters is None:
            raise ValueError("Invalid value for `exporters`, must not be `None`")  # noqa: E501

        self._exporters = exporters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasetFormats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetFormats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
