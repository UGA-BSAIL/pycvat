# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from swagger_client.configuration import Configuration


class DatasetFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "ext": "str",
        "version": "str",
        "enabled": "bool",
    }

    attribute_map = {
        "name": "name",
        "ext": "ext",
        "version": "version",
        "enabled": "enabled",
    }

    def __init__(
        self,
        name=None,
        ext=None,
        version=None,
        enabled=None,
        _configuration=None,
    ):  # noqa: E501
        """DatasetFormat - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._ext = None
        self._version = None
        self._enabled = None
        self.discriminator = None

        self.name = name
        self.ext = ext
        self.version = version
        self.enabled = enabled

    @property
    def name(self):
        """Gets the name of this DatasetFormat.  # noqa: E501


        :return: The name of this DatasetFormat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetFormat.


        :param name: The name of this DatasetFormat.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and name is not None
            and len(name) > 64
        ):
            raise ValueError(
                "Invalid value for `name`, length must be less than or equal to `64`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and name is not None
            and len(name) < 1
        ):
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._name = name

    @property
    def ext(self):
        """Gets the ext of this DatasetFormat.  # noqa: E501


        :return: The ext of this DatasetFormat.  # noqa: E501
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this DatasetFormat.


        :param ext: The ext of this DatasetFormat.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ext is None:
            raise ValueError(
                "Invalid value for `ext`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and ext is not None
            and len(ext) > 64
        ):
            raise ValueError(
                "Invalid value for `ext`, length must be less than or equal to `64`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and ext is not None
            and len(ext) < 1
        ):
            raise ValueError(
                "Invalid value for `ext`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._ext = ext

    @property
    def version(self):
        """Gets the version of this DatasetFormat.  # noqa: E501


        :return: The version of this DatasetFormat.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DatasetFormat.


        :param version: The version of this DatasetFormat.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and version is None:
            raise ValueError(
                "Invalid value for `version`, must not be `None`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and version is not None
            and len(version) > 64
        ):
            raise ValueError(
                "Invalid value for `version`, length must be less than or equal to `64`"
            )  # noqa: E501
        if (
            self._configuration.client_side_validation
            and version is not None
            and len(version) < 1
        ):
            raise ValueError(
                "Invalid value for `version`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._version = version

    @property
    def enabled(self):
        """Gets the enabled of this DatasetFormat.  # noqa: E501


        :return: The enabled of this DatasetFormat.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DatasetFormat.


        :param enabled: The enabled of this DatasetFormat.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError(
                "Invalid value for `enabled`, must not be `None`"
            )  # noqa: E501

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DatasetFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetFormat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetFormat):
            return True

        return self.to_dict() != other.to_dict()
