# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserAgreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "display_text": "str",
        "url": "str",
        "required": "bool",
        "value": "bool",
    }

    attribute_map = {
        "name": "name",
        "display_text": "display_text",
        "url": "url",
        "required": "required",
        "value": "value",
    }

    def __init__(
        self, name=None, display_text="", url="", required=False, value=False
    ):  # noqa: E501
        """UserAgreement - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._display_text = None
        self._url = None
        self._required = None
        self._value = None
        self.discriminator = None
        self.name = name
        if display_text is not None:
            self.display_text = display_text
        if url is not None:
            self.url = url
        if required is not None:
            self.required = required
        if value is not None:
            self.value = value

    @property
    def name(self):
        """Gets the name of this UserAgreement.  # noqa: E501


        :return: The name of this UserAgreement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserAgreement.


        :param name: The name of this UserAgreement.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def display_text(self):
        """Gets the display_text of this UserAgreement.  # noqa: E501


        :return: The display_text of this UserAgreement.  # noqa: E501
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this UserAgreement.


        :param display_text: The display_text of this UserAgreement.  # noqa: E501
        :type: str
        """

        self._display_text = display_text

    @property
    def url(self):
        """Gets the url of this UserAgreement.  # noqa: E501


        :return: The url of this UserAgreement.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UserAgreement.


        :param url: The url of this UserAgreement.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def required(self):
        """Gets the required of this UserAgreement.  # noqa: E501


        :return: The required of this UserAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this UserAgreement.


        :param required: The required of this UserAgreement.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def value(self):
        """Gets the value of this UserAgreement.  # noqa: E501


        :return: The value of this UserAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UserAgreement.


        :param value: The value of this UserAgreement.  # noqa: E501
        :type: bool
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserAgreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAgreement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
