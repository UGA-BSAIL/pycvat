# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Plugins(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "git_integration": "bool",
        "analytics": "bool",
        "models": "bool",
    }

    attribute_map = {
        "git_integration": "GIT_INTEGRATION",
        "analytics": "ANALYTICS",
        "models": "MODELS",
    }

    def __init__(
        self, git_integration=None, analytics=None, models=None
    ):  # noqa: E501
        """Plugins - a model defined in Swagger"""  # noqa: E501
        self._git_integration = None
        self._analytics = None
        self._models = None
        self.discriminator = None
        self.git_integration = git_integration
        self.analytics = analytics
        self.models = models

    @property
    def git_integration(self):
        """Gets the git_integration of this Plugins.  # noqa: E501


        :return: The git_integration of this Plugins.  # noqa: E501
        :rtype: bool
        """
        return self._git_integration

    @git_integration.setter
    def git_integration(self, git_integration):
        """Sets the git_integration of this Plugins.


        :param git_integration: The git_integration of this Plugins.  # noqa: E501
        :type: bool
        """
        if git_integration is None:
            raise ValueError(
                "Invalid value for `git_integration`, must not be `None`"
            )  # noqa: E501

        self._git_integration = git_integration

    @property
    def analytics(self):
        """Gets the analytics of this Plugins.  # noqa: E501


        :return: The analytics of this Plugins.  # noqa: E501
        :rtype: bool
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this Plugins.


        :param analytics: The analytics of this Plugins.  # noqa: E501
        :type: bool
        """
        if analytics is None:
            raise ValueError(
                "Invalid value for `analytics`, must not be `None`"
            )  # noqa: E501

        self._analytics = analytics

    @property
    def models(self):
        """Gets the models of this Plugins.  # noqa: E501


        :return: The models of this Plugins.  # noqa: E501
        :rtype: bool
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Plugins.


        :param models: The models of this Plugins.  # noqa: E501
        :type: bool
        """
        if models is None:
            raise ValueError(
                "Invalid value for `models`, must not be `None`"
            )  # noqa: E501

        self._models = models

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Plugins, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plugins):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
