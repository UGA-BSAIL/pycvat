# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'id': 'int',
        'username': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'groups': 'list[str]',
        'is_staff': 'bool',
        'is_superuser': 'bool',
        'is_active': 'bool',
        'last_login': 'datetime',
        'date_joined': 'datetime'
    }

    attribute_map = {
        'url': 'url',
        'id': 'id',
        'username': 'username',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'groups': 'groups',
        'is_staff': 'is_staff',
        'is_superuser': 'is_superuser',
        'is_active': 'is_active',
        'last_login': 'last_login',
        'date_joined': 'date_joined'
    }

    def __init__(self, url=None, id=None, username=None, first_name=None, last_name=None, email=None, groups=None, is_staff=None, is_superuser=None, is_active=None, last_login=None, date_joined=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._id = None
        self._username = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._groups = None
        self._is_staff = None
        self._is_superuser = None
        self._is_active = None
        self._last_login = None
        self._date_joined = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        self.username = username
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        self.groups = groups
        if is_staff is not None:
            self.is_staff = is_staff
        if is_superuser is not None:
            self.is_superuser = is_superuser
        if is_active is not None:
            self.is_active = is_active
        if last_login is not None:
            self.last_login = last_login
        if date_joined is not None:
            self.date_joined = date_joined

    @property
    def url(self):
        """Gets the url of this User.  # noqa: E501


        :return: The url of this User.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this User.


        :param url: The url of this User.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501


        :return: The groups of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.


        :param groups: The groups of this User.  # noqa: E501
        :type: list[str]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")  # noqa: E501

        self._groups = groups

    @property
    def is_staff(self):
        """Gets the is_staff of this User.  # noqa: E501

        Designates whether the user can log into this admin site.  # noqa: E501

        :return: The is_staff of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this User.

        Designates whether the user can log into this admin site.  # noqa: E501

        :param is_staff: The is_staff of this User.  # noqa: E501
        :type: bool
        """

        self._is_staff = is_staff

    @property
    def is_superuser(self):
        """Gets the is_superuser of this User.  # noqa: E501

        Designates that this user has all permissions without explicitly assigning them.  # noqa: E501

        :return: The is_superuser of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this User.

        Designates that this user has all permissions without explicitly assigning them.  # noqa: E501

        :param is_superuser: The is_superuser of this User.  # noqa: E501
        :type: bool
        """

        self._is_superuser = is_superuser

    @property
    def is_active(self):
        """Gets the is_active of this User.  # noqa: E501

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.  # noqa: E501

        :return: The is_active of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this User.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.  # noqa: E501

        :param is_active: The is_active of this User.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def last_login(self):
        """Gets the last_login of this User.  # noqa: E501


        :return: The last_login of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def date_joined(self):
        """Gets the date_joined of this User.  # noqa: E501


        :return: The date_joined of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this User.


        :param date_joined: The date_joined of this User.  # noqa: E501
        :type: datetime
        """

        self._date_joined = date_joined

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
