# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chunk_size': 'int',
        'size': 'int',
        'image_quality': 'int',
        'start_frame': 'int',
        'stop_frame': 'int',
        'frame_filter': 'str',
        'compressed_chunk_type': 'str',
        'original_chunk_type': 'str',
        'client_files': 'list[ClientFile]',
        'server_files': 'list[ServerFile]',
        'remote_files': 'list[RemoteFile]',
        'use_zip_chunks': 'bool',
        'cloud_storage_id': 'int',
        'use_cache': 'bool',
        'copy_data': 'bool',
        'storage_method': 'str',
        'storage': 'str'
    }

    attribute_map = {
        'chunk_size': 'chunk_size',
        'size': 'size',
        'image_quality': 'image_quality',
        'start_frame': 'start_frame',
        'stop_frame': 'stop_frame',
        'frame_filter': 'frame_filter',
        'compressed_chunk_type': 'compressed_chunk_type',
        'original_chunk_type': 'original_chunk_type',
        'client_files': 'client_files',
        'server_files': 'server_files',
        'remote_files': 'remote_files',
        'use_zip_chunks': 'use_zip_chunks',
        'cloud_storage_id': 'cloud_storage_id',
        'use_cache': 'use_cache',
        'copy_data': 'copy_data',
        'storage_method': 'storage_method',
        'storage': 'storage'
    }

    def __init__(self, chunk_size=None, size=None, image_quality=None, start_frame=None, stop_frame=None, frame_filter=None, compressed_chunk_type=None, original_chunk_type=None, client_files=None, server_files=None, remote_files=None, use_zip_chunks=False, cloud_storage_id=None, use_cache=False, copy_data=False, storage_method=None, storage=None):  # noqa: E501
        """Data - a model defined in Swagger"""  # noqa: E501
        self._chunk_size = None
        self._size = None
        self._image_quality = None
        self._start_frame = None
        self._stop_frame = None
        self._frame_filter = None
        self._compressed_chunk_type = None
        self._original_chunk_type = None
        self._client_files = None
        self._server_files = None
        self._remote_files = None
        self._use_zip_chunks = None
        self._cloud_storage_id = None
        self._use_cache = None
        self._copy_data = None
        self._storage_method = None
        self._storage = None
        self.discriminator = None
        if chunk_size is not None:
            self.chunk_size = chunk_size
        if size is not None:
            self.size = size
        self.image_quality = image_quality
        if start_frame is not None:
            self.start_frame = start_frame
        if stop_frame is not None:
            self.stop_frame = stop_frame
        if frame_filter is not None:
            self.frame_filter = frame_filter
        if compressed_chunk_type is not None:
            self.compressed_chunk_type = compressed_chunk_type
        if original_chunk_type is not None:
            self.original_chunk_type = original_chunk_type
        if client_files is not None:
            self.client_files = client_files
        if server_files is not None:
            self.server_files = server_files
        if remote_files is not None:
            self.remote_files = remote_files
        if use_zip_chunks is not None:
            self.use_zip_chunks = use_zip_chunks
        if cloud_storage_id is not None:
            self.cloud_storage_id = cloud_storage_id
        if use_cache is not None:
            self.use_cache = use_cache
        if copy_data is not None:
            self.copy_data = copy_data
        if storage_method is not None:
            self.storage_method = storage_method
        if storage is not None:
            self.storage = storage

    @property
    def chunk_size(self):
        """Gets the chunk_size of this Data.  # noqa: E501


        :return: The chunk_size of this Data.  # noqa: E501
        :rtype: int
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this Data.


        :param chunk_size: The chunk_size of this Data.  # noqa: E501
        :type: int
        """

        self._chunk_size = chunk_size

    @property
    def size(self):
        """Gets the size of this Data.  # noqa: E501


        :return: The size of this Data.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Data.


        :param size: The size of this Data.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def image_quality(self):
        """Gets the image_quality of this Data.  # noqa: E501


        :return: The image_quality of this Data.  # noqa: E501
        :rtype: int
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this Data.


        :param image_quality: The image_quality of this Data.  # noqa: E501
        :type: int
        """
        if image_quality is None:
            raise ValueError("Invalid value for `image_quality`, must not be `None`")  # noqa: E501

        self._image_quality = image_quality

    @property
    def start_frame(self):
        """Gets the start_frame of this Data.  # noqa: E501


        :return: The start_frame of this Data.  # noqa: E501
        :rtype: int
        """
        return self._start_frame

    @start_frame.setter
    def start_frame(self, start_frame):
        """Sets the start_frame of this Data.


        :param start_frame: The start_frame of this Data.  # noqa: E501
        :type: int
        """

        self._start_frame = start_frame

    @property
    def stop_frame(self):
        """Gets the stop_frame of this Data.  # noqa: E501


        :return: The stop_frame of this Data.  # noqa: E501
        :rtype: int
        """
        return self._stop_frame

    @stop_frame.setter
    def stop_frame(self, stop_frame):
        """Sets the stop_frame of this Data.


        :param stop_frame: The stop_frame of this Data.  # noqa: E501
        :type: int
        """

        self._stop_frame = stop_frame

    @property
    def frame_filter(self):
        """Gets the frame_filter of this Data.  # noqa: E501


        :return: The frame_filter of this Data.  # noqa: E501
        :rtype: str
        """
        return self._frame_filter

    @frame_filter.setter
    def frame_filter(self, frame_filter):
        """Sets the frame_filter of this Data.


        :param frame_filter: The frame_filter of this Data.  # noqa: E501
        :type: str
        """

        self._frame_filter = frame_filter

    @property
    def compressed_chunk_type(self):
        """Gets the compressed_chunk_type of this Data.  # noqa: E501


        :return: The compressed_chunk_type of this Data.  # noqa: E501
        :rtype: str
        """
        return self._compressed_chunk_type

    @compressed_chunk_type.setter
    def compressed_chunk_type(self, compressed_chunk_type):
        """Sets the compressed_chunk_type of this Data.


        :param compressed_chunk_type: The compressed_chunk_type of this Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["video", "imageset", "list"]  # noqa: E501
        if compressed_chunk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compressed_chunk_type` ({0}), must be one of {1}"  # noqa: E501
                .format(compressed_chunk_type, allowed_values)
            )

        self._compressed_chunk_type = compressed_chunk_type

    @property
    def original_chunk_type(self):
        """Gets the original_chunk_type of this Data.  # noqa: E501


        :return: The original_chunk_type of this Data.  # noqa: E501
        :rtype: str
        """
        return self._original_chunk_type

    @original_chunk_type.setter
    def original_chunk_type(self, original_chunk_type):
        """Sets the original_chunk_type of this Data.


        :param original_chunk_type: The original_chunk_type of this Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["video", "imageset", "list"]  # noqa: E501
        if original_chunk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `original_chunk_type` ({0}), must be one of {1}"  # noqa: E501
                .format(original_chunk_type, allowed_values)
            )

        self._original_chunk_type = original_chunk_type

    @property
    def client_files(self):
        """Gets the client_files of this Data.  # noqa: E501


        :return: The client_files of this Data.  # noqa: E501
        :rtype: list[ClientFile]
        """
        return self._client_files

    @client_files.setter
    def client_files(self, client_files):
        """Sets the client_files of this Data.


        :param client_files: The client_files of this Data.  # noqa: E501
        :type: list[ClientFile]
        """

        self._client_files = client_files

    @property
    def server_files(self):
        """Gets the server_files of this Data.  # noqa: E501


        :return: The server_files of this Data.  # noqa: E501
        :rtype: list[ServerFile]
        """
        return self._server_files

    @server_files.setter
    def server_files(self, server_files):
        """Sets the server_files of this Data.


        :param server_files: The server_files of this Data.  # noqa: E501
        :type: list[ServerFile]
        """

        self._server_files = server_files

    @property
    def remote_files(self):
        """Gets the remote_files of this Data.  # noqa: E501


        :return: The remote_files of this Data.  # noqa: E501
        :rtype: list[RemoteFile]
        """
        return self._remote_files

    @remote_files.setter
    def remote_files(self, remote_files):
        """Sets the remote_files of this Data.


        :param remote_files: The remote_files of this Data.  # noqa: E501
        :type: list[RemoteFile]
        """

        self._remote_files = remote_files

    @property
    def use_zip_chunks(self):
        """Gets the use_zip_chunks of this Data.  # noqa: E501


        :return: The use_zip_chunks of this Data.  # noqa: E501
        :rtype: bool
        """
        return self._use_zip_chunks

    @use_zip_chunks.setter
    def use_zip_chunks(self, use_zip_chunks):
        """Sets the use_zip_chunks of this Data.


        :param use_zip_chunks: The use_zip_chunks of this Data.  # noqa: E501
        :type: bool
        """

        self._use_zip_chunks = use_zip_chunks

    @property
    def cloud_storage_id(self):
        """Gets the cloud_storage_id of this Data.  # noqa: E501


        :return: The cloud_storage_id of this Data.  # noqa: E501
        :rtype: int
        """
        return self._cloud_storage_id

    @cloud_storage_id.setter
    def cloud_storage_id(self, cloud_storage_id):
        """Sets the cloud_storage_id of this Data.


        :param cloud_storage_id: The cloud_storage_id of this Data.  # noqa: E501
        :type: int
        """

        self._cloud_storage_id = cloud_storage_id

    @property
    def use_cache(self):
        """Gets the use_cache of this Data.  # noqa: E501


        :return: The use_cache of this Data.  # noqa: E501
        :rtype: bool
        """
        return self._use_cache

    @use_cache.setter
    def use_cache(self, use_cache):
        """Sets the use_cache of this Data.


        :param use_cache: The use_cache of this Data.  # noqa: E501
        :type: bool
        """

        self._use_cache = use_cache

    @property
    def copy_data(self):
        """Gets the copy_data of this Data.  # noqa: E501


        :return: The copy_data of this Data.  # noqa: E501
        :rtype: bool
        """
        return self._copy_data

    @copy_data.setter
    def copy_data(self, copy_data):
        """Sets the copy_data of this Data.


        :param copy_data: The copy_data of this Data.  # noqa: E501
        :type: bool
        """

        self._copy_data = copy_data

    @property
    def storage_method(self):
        """Gets the storage_method of this Data.  # noqa: E501


        :return: The storage_method of this Data.  # noqa: E501
        :rtype: str
        """
        return self._storage_method

    @storage_method.setter
    def storage_method(self, storage_method):
        """Sets the storage_method of this Data.


        :param storage_method: The storage_method of this Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["cache", "file_system"]  # noqa: E501
        if storage_method not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_method` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_method, allowed_values)
            )

        self._storage_method = storage_method

    @property
    def storage(self):
        """Gets the storage of this Data.  # noqa: E501


        :return: The storage of this Data.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Data.


        :param storage: The storage of this Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["cloud_storage", "local", "share"]  # noqa: E501
        if storage not in allowed_values:
            raise ValueError(
                "Invalid value for `storage` ({0}), must be one of {1}"  # noqa: E501
                .format(storage, allowed_values)
            )

        self._storage = storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
