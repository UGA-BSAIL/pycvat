# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CloudStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider_type': 'str',
        'resource': 'str',
        'display_name': 'str',
        'owner': 'BasicUser',
        'credentials_type': 'str',
        'created_date': 'datetime',
        'updated_date': 'datetime',
        'session_token': 'str',
        'account_name': 'str',
        'key': 'str',
        'secret_key': 'str',
        'key_file_path': 'str',
        'specific_attributes': 'str',
        'description': 'str',
        'id': 'int',
        'manifests': 'list[Manifest]'
    }

    attribute_map = {
        'provider_type': 'provider_type',
        'resource': 'resource',
        'display_name': 'display_name',
        'owner': 'owner',
        'credentials_type': 'credentials_type',
        'created_date': 'created_date',
        'updated_date': 'updated_date',
        'session_token': 'session_token',
        'account_name': 'account_name',
        'key': 'key',
        'secret_key': 'secret_key',
        'key_file_path': 'key_file_path',
        'specific_attributes': 'specific_attributes',
        'description': 'description',
        'id': 'id',
        'manifests': 'manifests'
    }

    def __init__(self, provider_type=None, resource=None, display_name=None, owner=None, credentials_type=None, created_date=None, updated_date=None, session_token=None, account_name=None, key=None, secret_key=None, key_file_path=None, specific_attributes=None, description=None, id=None, manifests=None):  # noqa: E501
        """CloudStorage - a model defined in Swagger"""  # noqa: E501
        self._provider_type = None
        self._resource = None
        self._display_name = None
        self._owner = None
        self._credentials_type = None
        self._created_date = None
        self._updated_date = None
        self._session_token = None
        self._account_name = None
        self._key = None
        self._secret_key = None
        self._key_file_path = None
        self._specific_attributes = None
        self._description = None
        self._id = None
        self._manifests = None
        self.discriminator = None
        self.provider_type = provider_type
        self.resource = resource
        self.display_name = display_name
        if owner is not None:
            self.owner = owner
        self.credentials_type = credentials_type
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if session_token is not None:
            self.session_token = session_token
        if account_name is not None:
            self.account_name = account_name
        if key is not None:
            self.key = key
        if secret_key is not None:
            self.secret_key = secret_key
        if key_file_path is not None:
            self.key_file_path = key_file_path
        if specific_attributes is not None:
            self.specific_attributes = specific_attributes
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if manifests is not None:
            self.manifests = manifests

    @property
    def provider_type(self):
        """Gets the provider_type of this CloudStorage.  # noqa: E501


        :return: The provider_type of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this CloudStorage.


        :param provider_type: The provider_type of this CloudStorage.  # noqa: E501
        :type: str
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")  # noqa: E501
        allowed_values = ["AWS_S3_BUCKET", "AZURE_CONTAINER", "GOOGLE_DRIVE", "GOOGLE_CLOUD_STORAGE"]  # noqa: E501
        if provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provider_type` ({0}), must be one of {1}"  # noqa: E501
                .format(provider_type, allowed_values)
            )

        self._provider_type = provider_type

    @property
    def resource(self):
        """Gets the resource of this CloudStorage.  # noqa: E501


        :return: The resource of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this CloudStorage.


        :param resource: The resource of this CloudStorage.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def display_name(self):
        """Gets the display_name of this CloudStorage.  # noqa: E501


        :return: The display_name of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CloudStorage.


        :param display_name: The display_name of this CloudStorage.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def owner(self):
        """Gets the owner of this CloudStorage.  # noqa: E501


        :return: The owner of this CloudStorage.  # noqa: E501
        :rtype: BasicUser
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CloudStorage.


        :param owner: The owner of this CloudStorage.  # noqa: E501
        :type: BasicUser
        """

        self._owner = owner

    @property
    def credentials_type(self):
        """Gets the credentials_type of this CloudStorage.  # noqa: E501


        :return: The credentials_type of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._credentials_type

    @credentials_type.setter
    def credentials_type(self, credentials_type):
        """Sets the credentials_type of this CloudStorage.


        :param credentials_type: The credentials_type of this CloudStorage.  # noqa: E501
        :type: str
        """
        if credentials_type is None:
            raise ValueError("Invalid value for `credentials_type`, must not be `None`")  # noqa: E501
        allowed_values = ["KEY_SECRET_KEY_PAIR", "ACCOUNT_NAME_TOKEN_PAIR", "KEY_FILE_PATH", "ANONYMOUS_ACCESS"]  # noqa: E501
        if credentials_type not in allowed_values:
            raise ValueError(
                "Invalid value for `credentials_type` ({0}), must be one of {1}"  # noqa: E501
                .format(credentials_type, allowed_values)
            )

        self._credentials_type = credentials_type

    @property
    def created_date(self):
        """Gets the created_date of this CloudStorage.  # noqa: E501


        :return: The created_date of this CloudStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CloudStorage.


        :param created_date: The created_date of this CloudStorage.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this CloudStorage.  # noqa: E501


        :return: The updated_date of this CloudStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CloudStorage.


        :param updated_date: The updated_date of this CloudStorage.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def session_token(self):
        """Gets the session_token of this CloudStorage.  # noqa: E501


        :return: The session_token of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this CloudStorage.


        :param session_token: The session_token of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._session_token = session_token

    @property
    def account_name(self):
        """Gets the account_name of this CloudStorage.  # noqa: E501


        :return: The account_name of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CloudStorage.


        :param account_name: The account_name of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def key(self):
        """Gets the key of this CloudStorage.  # noqa: E501


        :return: The key of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CloudStorage.


        :param key: The key of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def secret_key(self):
        """Gets the secret_key of this CloudStorage.  # noqa: E501


        :return: The secret_key of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this CloudStorage.


        :param secret_key: The secret_key of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def key_file_path(self):
        """Gets the key_file_path of this CloudStorage.  # noqa: E501


        :return: The key_file_path of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._key_file_path

    @key_file_path.setter
    def key_file_path(self, key_file_path):
        """Sets the key_file_path of this CloudStorage.


        :param key_file_path: The key_file_path of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._key_file_path = key_file_path

    @property
    def specific_attributes(self):
        """Gets the specific_attributes of this CloudStorage.  # noqa: E501

        structure like key1=value1&key2=value2 supported: range=aws_range  # noqa: E501

        :return: The specific_attributes of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._specific_attributes

    @specific_attributes.setter
    def specific_attributes(self, specific_attributes):
        """Sets the specific_attributes of this CloudStorage.

        structure like key1=value1&key2=value2 supported: range=aws_range  # noqa: E501

        :param specific_attributes: The specific_attributes of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._specific_attributes = specific_attributes

    @property
    def description(self):
        """Gets the description of this CloudStorage.  # noqa: E501


        :return: The description of this CloudStorage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudStorage.


        :param description: The description of this CloudStorage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CloudStorage.  # noqa: E501


        :return: The id of this CloudStorage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudStorage.


        :param id: The id of this CloudStorage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def manifests(self):
        """Gets the manifests of this CloudStorage.  # noqa: E501


        :return: The manifests of this CloudStorage.  # noqa: E501
        :rtype: list[Manifest]
        """
        return self._manifests

    @manifests.setter
    def manifests(self, manifests):
        """Sets the manifests of this CloudStorage.


        :param manifests: The manifests of this CloudStorage.  # noqa: E501
        :type: list[Manifest]
        """

        self._manifests = manifests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
