# coding: utf-8

"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    OpenAPI spec version: v1
    Contact: nikita.manovich@intel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'id': 'int',
        'name': 'str',
        'project_id': 'int',
        'mode': 'str',
        'owner': 'BasicUser',
        'assignee': 'BasicUser',
        'owner_id': 'int',
        'assignee_id': 'int',
        'bug_tracker': 'str',
        'created_date': 'datetime',
        'updated_date': 'datetime',
        'overlap': 'int',
        'segment_size': 'int',
        'status': 'str',
        'labels': 'list[Label]',
        'segments': 'list[Segment]',
        'data_chunk_size': 'str',
        'data_compressed_chunk_type': 'str',
        'data_original_chunk_type': 'str',
        'size': 'str',
        'image_quality': 'str',
        'data': 'str',
        'dimension': 'str',
        'subset': 'str'
    }

    attribute_map = {
        'url': 'url',
        'id': 'id',
        'name': 'name',
        'project_id': 'project_id',
        'mode': 'mode',
        'owner': 'owner',
        'assignee': 'assignee',
        'owner_id': 'owner_id',
        'assignee_id': 'assignee_id',
        'bug_tracker': 'bug_tracker',
        'created_date': 'created_date',
        'updated_date': 'updated_date',
        'overlap': 'overlap',
        'segment_size': 'segment_size',
        'status': 'status',
        'labels': 'labels',
        'segments': 'segments',
        'data_chunk_size': 'data_chunk_size',
        'data_compressed_chunk_type': 'data_compressed_chunk_type',
        'data_original_chunk_type': 'data_original_chunk_type',
        'size': 'size',
        'image_quality': 'image_quality',
        'data': 'data',
        'dimension': 'dimension',
        'subset': 'subset'
    }

    def __init__(self, url=None, id=None, name=None, project_id=None, mode=None, owner=None, assignee=None, owner_id=None, assignee_id=None, bug_tracker=None, created_date=None, updated_date=None, overlap=None, segment_size=None, status=None, labels=None, segments=None, data_chunk_size=None, data_compressed_chunk_type=None, data_original_chunk_type=None, size=None, image_quality=None, data=None, dimension=None, subset=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._id = None
        self._name = None
        self._project_id = None
        self._mode = None
        self._owner = None
        self._assignee = None
        self._owner_id = None
        self._assignee_id = None
        self._bug_tracker = None
        self._created_date = None
        self._updated_date = None
        self._overlap = None
        self._segment_size = None
        self._status = None
        self._labels = None
        self._segments = None
        self._data_chunk_size = None
        self._data_compressed_chunk_type = None
        self._data_original_chunk_type = None
        self._size = None
        self._image_quality = None
        self._data = None
        self._dimension = None
        self._subset = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        self.name = name
        if project_id is not None:
            self.project_id = project_id
        if mode is not None:
            self.mode = mode
        if owner is not None:
            self.owner = owner
        if assignee is not None:
            self.assignee = assignee
        if owner_id is not None:
            self.owner_id = owner_id
        if assignee_id is not None:
            self.assignee_id = assignee_id
        if bug_tracker is not None:
            self.bug_tracker = bug_tracker
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if overlap is not None:
            self.overlap = overlap
        if segment_size is not None:
            self.segment_size = segment_size
        if status is not None:
            self.status = status
        if labels is not None:
            self.labels = labels
        if segments is not None:
            self.segments = segments
        if data_chunk_size is not None:
            self.data_chunk_size = data_chunk_size
        if data_compressed_chunk_type is not None:
            self.data_compressed_chunk_type = data_compressed_chunk_type
        if data_original_chunk_type is not None:
            self.data_original_chunk_type = data_original_chunk_type
        if size is not None:
            self.size = size
        if image_quality is not None:
            self.image_quality = image_quality
        if data is not None:
            self.data = data
        if dimension is not None:
            self.dimension = dimension
        if subset is not None:
            self.subset = subset

    @property
    def url(self):
        """Gets the url of this Task.  # noqa: E501


        :return: The url of this Task.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Task.


        :param url: The url of this Task.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501


        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Task.  # noqa: E501


        :return: The project_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Task.


        :param project_id: The project_id of this Task.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def mode(self):
        """Gets the mode of this Task.  # noqa: E501


        :return: The mode of this Task.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Task.


        :param mode: The mode of this Task.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def owner(self):
        """Gets the owner of this Task.  # noqa: E501


        :return: The owner of this Task.  # noqa: E501
        :rtype: BasicUser
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Task.


        :param owner: The owner of this Task.  # noqa: E501
        :type: BasicUser
        """

        self._owner = owner

    @property
    def assignee(self):
        """Gets the assignee of this Task.  # noqa: E501


        :return: The assignee of this Task.  # noqa: E501
        :rtype: BasicUser
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Task.


        :param assignee: The assignee of this Task.  # noqa: E501
        :type: BasicUser
        """

        self._assignee = assignee

    @property
    def owner_id(self):
        """Gets the owner_id of this Task.  # noqa: E501


        :return: The owner_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Task.


        :param owner_id: The owner_id of this Task.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def assignee_id(self):
        """Gets the assignee_id of this Task.  # noqa: E501


        :return: The assignee_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this Task.


        :param assignee_id: The assignee_id of this Task.  # noqa: E501
        :type: int
        """

        self._assignee_id = assignee_id

    @property
    def bug_tracker(self):
        """Gets the bug_tracker of this Task.  # noqa: E501


        :return: The bug_tracker of this Task.  # noqa: E501
        :rtype: str
        """
        return self._bug_tracker

    @bug_tracker.setter
    def bug_tracker(self, bug_tracker):
        """Sets the bug_tracker of this Task.


        :param bug_tracker: The bug_tracker of this Task.  # noqa: E501
        :type: str
        """

        self._bug_tracker = bug_tracker

    @property
    def created_date(self):
        """Gets the created_date of this Task.  # noqa: E501


        :return: The created_date of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Task.


        :param created_date: The created_date of this Task.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this Task.  # noqa: E501


        :return: The updated_date of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Task.


        :param updated_date: The updated_date of this Task.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def overlap(self):
        """Gets the overlap of this Task.  # noqa: E501


        :return: The overlap of this Task.  # noqa: E501
        :rtype: int
        """
        return self._overlap

    @overlap.setter
    def overlap(self, overlap):
        """Sets the overlap of this Task.


        :param overlap: The overlap of this Task.  # noqa: E501
        :type: int
        """

        self._overlap = overlap

    @property
    def segment_size(self):
        """Gets the segment_size of this Task.  # noqa: E501


        :return: The segment_size of this Task.  # noqa: E501
        :rtype: int
        """
        return self._segment_size

    @segment_size.setter
    def segment_size(self, segment_size):
        """Sets the segment_size of this Task.


        :param segment_size: The segment_size of this Task.  # noqa: E501
        :type: int
        """

        self._segment_size = segment_size

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = ["annotation", "validation", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def labels(self):
        """Gets the labels of this Task.  # noqa: E501


        :return: The labels of this Task.  # noqa: E501
        :rtype: list[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Task.


        :param labels: The labels of this Task.  # noqa: E501
        :type: list[Label]
        """

        self._labels = labels

    @property
    def segments(self):
        """Gets the segments of this Task.  # noqa: E501


        :return: The segments of this Task.  # noqa: E501
        :rtype: list[Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Task.


        :param segments: The segments of this Task.  # noqa: E501
        :type: list[Segment]
        """

        self._segments = segments

    @property
    def data_chunk_size(self):
        """Gets the data_chunk_size of this Task.  # noqa: E501


        :return: The data_chunk_size of this Task.  # noqa: E501
        :rtype: str
        """
        return self._data_chunk_size

    @data_chunk_size.setter
    def data_chunk_size(self, data_chunk_size):
        """Sets the data_chunk_size of this Task.


        :param data_chunk_size: The data_chunk_size of this Task.  # noqa: E501
        :type: str
        """

        self._data_chunk_size = data_chunk_size

    @property
    def data_compressed_chunk_type(self):
        """Gets the data_compressed_chunk_type of this Task.  # noqa: E501


        :return: The data_compressed_chunk_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._data_compressed_chunk_type

    @data_compressed_chunk_type.setter
    def data_compressed_chunk_type(self, data_compressed_chunk_type):
        """Sets the data_compressed_chunk_type of this Task.


        :param data_compressed_chunk_type: The data_compressed_chunk_type of this Task.  # noqa: E501
        :type: str
        """

        self._data_compressed_chunk_type = data_compressed_chunk_type

    @property
    def data_original_chunk_type(self):
        """Gets the data_original_chunk_type of this Task.  # noqa: E501


        :return: The data_original_chunk_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._data_original_chunk_type

    @data_original_chunk_type.setter
    def data_original_chunk_type(self, data_original_chunk_type):
        """Sets the data_original_chunk_type of this Task.


        :param data_original_chunk_type: The data_original_chunk_type of this Task.  # noqa: E501
        :type: str
        """

        self._data_original_chunk_type = data_original_chunk_type

    @property
    def size(self):
        """Gets the size of this Task.  # noqa: E501


        :return: The size of this Task.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Task.


        :param size: The size of this Task.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def image_quality(self):
        """Gets the image_quality of this Task.  # noqa: E501


        :return: The image_quality of this Task.  # noqa: E501
        :rtype: str
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this Task.


        :param image_quality: The image_quality of this Task.  # noqa: E501
        :type: str
        """

        self._image_quality = image_quality

    @property
    def data(self):
        """Gets the data of this Task.  # noqa: E501


        :return: The data of this Task.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Task.


        :param data: The data of this Task.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def dimension(self):
        """Gets the dimension of this Task.  # noqa: E501


        :return: The dimension of this Task.  # noqa: E501
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this Task.


        :param dimension: The dimension of this Task.  # noqa: E501
        :type: str
        """

        self._dimension = dimension

    @property
    def subset(self):
        """Gets the subset of this Task.  # noqa: E501


        :return: The subset of this Task.  # noqa: E501
        :rtype: str
        """
        return self._subset

    @subset.setter
    def subset(self, subset):
        """Sets the subset of this Task.


        :param subset: The subset of this Task.  # noqa: E501
        :type: str
        """

        self._subset = subset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
